//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Client_Side
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class AppContext5 : DbContext
    {
        public AppContext5()
            : base("name=AppContext5")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Apartment> Apartments { get; set; }
        public virtual DbSet<ApartmentOwner> ApartmentOwners { get; set; }
        public virtual DbSet<ApartmentPicture> ApartmentPictures { get; set; }
        public virtual DbSet<ApartmentReservation> ApartmentReservations { get; set; }
        public virtual DbSet<ApartmentReview> ApartmentReviews { get; set; }
        public virtual DbSet<ApartmentStatu> ApartmentStatus { get; set; }
        public virtual DbSet<AspNetRole> AspNetRoles { get; set; }
        public virtual DbSet<AspNetUserClaim> AspNetUserClaims { get; set; }
        public virtual DbSet<AspNetUserLogin> AspNetUserLogins { get; set; }
        public virtual DbSet<AspNetUser> AspNetUsers { get; set; }
        public virtual DbSet<City> Cities { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<Tag> Tags { get; set; }
        public virtual DbSet<TaggedApartment> TaggedApartments { get; set; }
        public virtual DbSet<TagType> TagTypes { get; set; }
    
        public virtual int addApt(Nullable<int> ownerId, Nullable<int> typeId, Nullable<int> statusId, Nullable<int> cityId, string address, string name, string nameEng, Nullable<double> price, Nullable<int> maxAdults, Nullable<int> maxChildren, Nullable<int> totalRooms, Nullable<int> beachDistance)
        {
            var ownerIdParameter = ownerId.HasValue ?
                new ObjectParameter("OwnerId", ownerId) :
                new ObjectParameter("OwnerId", typeof(int));
    
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("TypeId", typeId) :
                new ObjectParameter("TypeId", typeof(int));
    
            var statusIdParameter = statusId.HasValue ?
                new ObjectParameter("StatusId", statusId) :
                new ObjectParameter("StatusId", typeof(int));
    
            var cityIdParameter = cityId.HasValue ?
                new ObjectParameter("CityId", cityId) :
                new ObjectParameter("CityId", typeof(int));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var nameEngParameter = nameEng != null ?
                new ObjectParameter("NameEng", nameEng) :
                new ObjectParameter("NameEng", typeof(string));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(double));
    
            var maxAdultsParameter = maxAdults.HasValue ?
                new ObjectParameter("MaxAdults", maxAdults) :
                new ObjectParameter("MaxAdults", typeof(int));
    
            var maxChildrenParameter = maxChildren.HasValue ?
                new ObjectParameter("MaxChildren", maxChildren) :
                new ObjectParameter("MaxChildren", typeof(int));
    
            var totalRoomsParameter = totalRooms.HasValue ?
                new ObjectParameter("TotalRooms", totalRooms) :
                new ObjectParameter("TotalRooms", typeof(int));
    
            var beachDistanceParameter = beachDistance.HasValue ?
                new ObjectParameter("BeachDistance", beachDistance) :
                new ObjectParameter("BeachDistance", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("addApt", ownerIdParameter, typeIdParameter, statusIdParameter, cityIdParameter, addressParameter, nameParameter, nameEngParameter, priceParameter, maxAdultsParameter, maxChildrenParameter, totalRoomsParameter, beachDistanceParameter);
        }
    
        public virtual int AddTag(string name, Nullable<int> typeId)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("TypeId", typeId) :
                new ObjectParameter("TypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddTag", nameParameter, typeIdParameter);
        }
    
        public virtual int AppendImg(string imgPath, Nullable<int> aptID)
        {
            var imgPathParameter = imgPath != null ?
                new ObjectParameter("imgPath", imgPath) :
                new ObjectParameter("imgPath", typeof(string));
    
            var aptIDParameter = aptID.HasValue ?
                new ObjectParameter("aptID", aptID) :
                new ObjectParameter("aptID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AppendImg", imgPathParameter, aptIDParameter);
        }
    
        public virtual int DeleteImg(string img)
        {
            var imgParameter = img != null ?
                new ObjectParameter("img", img) :
                new ObjectParameter("img", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteImg", imgParameter);
        }
    
        public virtual int DeleteTag(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteTag", nameParameter);
        }
    
        public virtual ObjectResult<GetCities_Result> GetCities()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCities_Result>("GetCities");
        }
    
        public virtual int GetData()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetData");
        }
    
        public virtual ObjectResult<GetData2_Result> GetData2()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetData2_Result>("GetData2");
        }
    
        public virtual ObjectResult<GetImages_Result> GetImages(Nullable<int> apartmentId)
        {
            var apartmentIdParameter = apartmentId.HasValue ?
                new ObjectParameter("ApartmentId", apartmentId) :
                new ObjectParameter("ApartmentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetImages_Result>("GetImages", apartmentIdParameter);
        }
    
        public virtual ObjectResult<getOwners_Result> getOwners()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getOwners_Result>("getOwners");
        }
    
        public virtual ObjectResult<getStatus_Result> getStatus()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getStatus_Result>("getStatus");
        }
    
        public virtual ObjectResult<GetTags_Result> GetTags()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTags_Result>("GetTags");
        }
    
        public virtual ObjectResult<GetTagType_Result> GetTagType()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTagType_Result>("GetTagType");
        }
    
        public virtual ObjectResult<Retrieve_Result> Retrieve(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Retrieve_Result>("Retrieve", idParameter);
        }
    
        public virtual int softDeleteApt(Nullable<int> idApt)
        {
            var idAptParameter = idApt.HasValue ?
                new ObjectParameter("idApt", idApt) :
                new ObjectParameter("idApt", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("softDeleteApt", idAptParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int updateApt(Nullable<int> id, Nullable<int> totalRooms, Nullable<int> maxAdults, Nullable<int> maxChildren, Nullable<int> beachDistance)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var totalRoomsParameter = totalRooms.HasValue ?
                new ObjectParameter("TotalRooms", totalRooms) :
                new ObjectParameter("TotalRooms", typeof(int));
    
            var maxAdultsParameter = maxAdults.HasValue ?
                new ObjectParameter("MaxAdults", maxAdults) :
                new ObjectParameter("MaxAdults", typeof(int));
    
            var maxChildrenParameter = maxChildren.HasValue ?
                new ObjectParameter("MaxChildren", maxChildren) :
                new ObjectParameter("MaxChildren", typeof(int));
    
            var beachDistanceParameter = beachDistance.HasValue ?
                new ObjectParameter("BeachDistance", beachDistance) :
                new ObjectParameter("BeachDistance", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("updateApt", idParameter, totalRoomsParameter, maxAdultsParameter, maxChildrenParameter, beachDistanceParameter);
        }
    
        public virtual int updateStatus(Nullable<int> idApt, Nullable<int> idStatus)
        {
            var idAptParameter = idApt.HasValue ?
                new ObjectParameter("idApt", idApt) :
                new ObjectParameter("idApt", typeof(int));
    
            var idStatusParameter = idStatus.HasValue ?
                new ObjectParameter("idStatus", idStatus) :
                new ObjectParameter("idStatus", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("updateStatus", idAptParameter, idStatusParameter);
        }
    }
}
